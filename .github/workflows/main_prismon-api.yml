trigger:
  branches:
    include:
      - main

pool:
  vmImage: 'ubuntu-latest'

variables:
  buildConfiguration: 'Release'
  azureSubscription: 'prismon-azure-connection'
  webAppName: 'prismon-api'
  resourceGroup: 'prismon-rg'
  redisCacheName: 'prismon-redis'

steps:
- task: UseDotNet@2
  inputs:
    packageType: 'sdk'
    version: '8.x'

- task: DotNetCoreCLI@2
  displayName: 'Restore dependencies'
  inputs:
    command: 'restore'
    projects: '**/*.csproj'

- task: DotNetCoreCLI@2
  displayName: 'Build project'
  inputs:
    command: 'build'
    projects: '**/*.csproj'
    arguments: '--configuration $(buildConfiguration) --no-restore'

- task: DotNetCoreCLI@2
  displayName: 'Run tests'
  inputs:
    command: 'test'
    projects: '**/*Tests.csproj'
    arguments: '--configuration $(buildConfiguration) --no-build --no-restore'

- task: DotNetCoreCLI@2
  displayName: 'Publish project'
  inputs:
    command: 'publish'
    publishWebProjects: true
    arguments: '--configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)/webapp --no-restore'
    zipAfterPublish: true

- task: DotNetCoreCLI@2
  displayName: 'Apply EF Core migrations to Supabase'
  inputs:
    command: 'custom'
    custom: 'ef'
    arguments: 'database update --project Prismon.Api.csproj --context PrismonDbContext'
  env:
    SUPABASE_CONNECTION_STRING: $(SUPABASE_CONNECTION_STRING) # Secure variable

- task: PublishBuildArtifacts@1
  displayName: 'Publish artifacts'
  inputs:
    pathToPublish: '$(Build.ArtifactStagingDirectory)'
    artifactName: 'webapp'
    publishLocation: 'Container'

- task: AzureCLI@2
  displayName: 'Flush Azure Cache for Redis'
  inputs:
    azureSubscription: '$(azureSubscription)'
    scriptType: 'pscore'
    scriptLocation: 'inlineScript'
    inlineScript: |
      az redis flush --name $(redisCacheName) --resource-group $(resourceGroup) --confirm

- task: AzureWebApp@1
  displayName: 'Deploy to Azure App Service'
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
  inputs:
    azureSubscription: '$(azureSubscription)'
    appType: 'webAppLinux'
    appName: '$(webAppName)'
    package: '$(Build.ArtifactStagingDirectory)/webapp/**/*.zip'
    deploymentMethod: 'zipDeploy'